---
title: "Example #1"
---

This example uses just the Illumina data (<https://www.ebi.ac.uk/ena/browser/view/ERR3335404>) generated for the study "*Whole genome sequence of Mycobacterium ulcerans CSURP7741, a French Guyana clinical isolate*" (<https://www.ebi.ac.uk/ena/browser/view/PRJEB30628>). Mycobacterium ulcerans is an environmental non-tuberculous mycobacterium responsible for Buruli ulcer.

The reference genome paper is "[Complete genome sequence of the frog pathogen Mycobacterium ulcerans ecovar Liflandii](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3554023/)" and it's sequence <https://www.ncbi.nlm.nih.gov/nuccore/NC_020133>. Mycobacterium liflandii 128FXT, complete sequence NCBI Reference Sequence: NC_020133.1

This work is based on the excellent presentation and analysis as instructed by vincentappiah [video](https://www.youtube.com/watch?v=S_sRo_85jhs&list=PLe1-kjuYBZ06-7O8eeqLoFsGQYGFbytzd). The work has been reproduced and adapted in order that it works on a Mac laptop with updated versions of analysis software available in 2024 and using the Quarto package for presentation and re-usability.

## Enter Conda env, data download, QC reports

download data and QC of raw Illumina with [fastqc](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ "fastqc")

```{zsh}
# use clean install of conda on machine in private space 
source ~/anaconda3/etc/profile.d/conda.sh
conda -V
# all those envs explained on Set Up page
conda env list
conda activate bacterial-genomics-tutorial-sw7
# uncomment appropriately to re-run
# download data to data 
# chmod +x download_data.sh
# ./download_data.sh
# run fastqc
# mkdir QC_RAW_READS
# fastqc data/*.fastq.gz -o QC_RAW_READS
conda deactivate
```

Results files are QC html reports

[./QC_RAW_READS/P7741_R1_fastqc.html](./QC_RAW_READS/P7741_R1_fastqc.html)

[./QC_RAW_READS/P7741_R2_fastqc.html](./QC_RAW_READS/P7741_R1_fastqc.html)

## Trimming and post trim QC reports

Using [Trimmomatic: A flexible read trimming tool for Illumina NGS data](http://www.usadellab.org/cms/index.php?page=trimmomatic) from Björn Usadel lab (hallöchen!). Alternative is [Sickle](https://github.com/najoshi/sickle) (A windowed adaptive trimming tool for FASTQ files using quality)

```{zsh}
# use clean install of conda on machine in private space 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate bacterial-genomics-tutorial-sw7

# uncomment appropriately to re-run

# mkdir trimmed_reads
read1=data/P7741_R1.fastq.gz
read2=data/P7741_R2.fastq.gz
OutputForwardPaired=trimmed_reads/P7741_R1.fastq.gz    
OutputForwardUnpaired=trimmed_reads/P7741_unpaired_R1.fastq.gz
OutputReversePaired=trimmed_reads/P7741_R2.fastq.gz
OutputReverseUnpaired=trimmed_reads/P7741_unpaired_R2.fastq.gz
threads=4

# trimmomatic PE -threads $threads $read1 $read2 \
# $OutputForwardPaired $OutputForwardUnpaired \
# $OutputReversePaired $OutputReverseUnpaired \
# ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:8:true HEADCROP:3 TRAILING:10 MINLEN:25

# mkdir QC_TRIMMED_READS
# fastqc trimmed_reads/* -o QC_TRIMMED_READS

ls -1 QC_TRIMMED_READS

conda deactivate
```

Results files are QC html reports. vincentappiah's results are different around 16:29. In video he speaks of sickle trimming, but the code uses trimmomatic.

[./QC_TRIMMED_READS/P7741_R1_fastqc.html](./QC_TRIMMED_READS/P7741_R1_fastqc.html)

[./QC_TRIMMED_READS/P7741_R2_fastqc.html](./QC_TRIMMED_READS/P7741_R1_fastqc.html)

[./QC_TRIMMED_READS/P7741_unpaired_R1_fastqc.html](./QC_TRIMMED_READS/P7741_unpaired_R1_fastqc.html)

[./QC_TRIMMED_READS/P7741_unpaired_R2_fastqc.html](./QC_TRIMMED_READS/P7741_unpaired_R2_fastqc.html)

## Assembly

using [SPAdes - St. Petersburg genome assembler (SPAdes)](https://github.com/ablab/spades?tab=readme-ov-file)

```{zsh}
# Real problems setting up spades with conda - notes on Set Up page
# Solution was to get the spades Mac binaries
#
# It runs but takes quite some time on my mini-server
# Therefore delete directory
# P7741_SPADES_OUT
# and re-run if needed
# ~/SPAdes-3.15.5-Darwin/bin/spades.py --careful -o P7741_SPADES_OUT -1 trimmed_reads/P7741_R1.fastq.gz -2 trimmed_reads/P7741_R2.fastq.gz

ls -1 P7741_SPADES_OUT

```

## Polishing

with

-   [bwa](https://bio-bwa.sourceforge.net/) (alignment via Burrows-Wheeler transformation)

-   [samtools](https://www.htslib.org/) (for manipulating high-throughput sequencing data)

-   [pilon](https://github.com/broadinstitute/pilon/wiki) (automatically improve draft assemblies and find variation among strains including large event detection)

Use script to do 4 rounds (not guaranteed to be optimal) of polishing. Runs but takes quite some time on my mini-server but it goes.

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate bacterial-genomics-tutorial-sw7

# To clean re-run delete dir polishing_process
# re-run script
# ./polish.sh

# list out the files developed 
find polishing_process

conda deactivate
```

## QC of Assembly

using [quast](https://quast.sourceforge.net/) with results linked in below

```{zsh}
# conda
source ~/anaconda3/etc/profile.d/conda.sh

# env just with the quast software
conda activate just_quast

# genomes dir taken from vincentappiah repo
# quast throws an error with default script
# -t 1 solves 
# other potential issue may exist as the install of quast was not completed...
# see SetUp page

# uncomment to run again
# mkdir QC_ASSEMBLY
# quast.py -t 1 -o QC_ASSEMBLY -R genomes/Liflandii.fasta P7741_SPADES_OUT/scaffolds.fasta P7741.polished.fasta

# Results notes
# N50 quality didn't change with polishing, GC% didn't change,
# Slight change in misassemblies 

# list out the top dir 
ls -1 QC_ASSEMBLY

conda deactivate
```

### Quality Assessment Tool for Genome Assemblies (QUAST)

[QC_ASSEMBLY/report.html](QC_ASSEMBLY/report.html)

### Icarus QUAST Contig Browser

[QC_ASSEMBLY/icarus.html](QC_ASSEMBLY/icarus.html "QC_ASSEMBLY/icarus.html")

[QC_ASSEMBLY/icarus_viewers/contig_size_viewer.html](QC_ASSEMBLY/icarus_viewers/contig_size_viewer.html)

[QC_ASSEMBLY/icarus_viewers/alignment_viewer.html](QC_ASSEMBLY/icarus_viewers/alignment_viewer.html "QC_ASSEMBLY/icarus_viewers/alignment_viewer.html")

## Reorder contigs

using ragtag

apart from the paper listed below, there is a more recent publication

[Automated assembly scaffolding using RagTag elevates a new tomato system for high-throughput genome editing](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-022-02823-7)

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate bacterial-genomics-tutorial-sw7

# genomes/Agy99.fasta is NC_008611.1 Mycobacterium ulcerans Agy99, complete sequence
# note this is a different genome to genomes/Liflandii.fasta

ragtag.py -c

# uncomment to re-run
## ragtag.py scaffold genomes/Agy99.fasta P7741.polished.fasta -o P7741_reordered

# Extract the reordered contig with a custom (modified!) python script
# The scripts accept name of the ragtag file containing the reordered contigs 
# and accession number for the reference genome

python extract_reordered.py P7741_reordered/ragtag.scaffold.fasta NC_008611.1

# at this stage vincentappiah gets length of 5291728 
# and a gc of 64.98
# potentially the difference is due to newer version of ragtag
# i.e. v1.0.2 vs RagTag v2.1.0

conda deactivate
```

## Multi-Locus Sequence Typing (MLST) and Antibiotic Resistance

using <https://github.com/tseemann/mlst> and <https://github.com/tseemann/abricate>

The results show the expected identity (7 alleles of mycobacteria) and there is an antibiotic resistance gene.

But need to use cgMLST, wgMLST and more...

Need to look at "chewBBACA is a comprehensive pipeline including a set of functions for the creation and validation of whole genome and core genome MultiLocus Sequence Typing (wg/cgMLST) schemas.."

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate bacterial-genomics-tutorial-sw7

echo "Alleles"
echo ""
mlst --csv P7741.reordered.fasta > mlst.csv

echo ""
echo "Antibiotic resistance"
echo ""
abricate P7741.reordered.fasta > amr.summary.tab
cat amr.summary.tab

conda deactivate
```

## Rapid prokaryotic genome annotation

using <https://github.com/tseemann/prokka> also from Torsten Seemann

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate bacterial-genomics-tutorial-sw7

cpus=4
# uncomment to re-run
# ran is around 10 minutes with 4 cores
#prokka --cpus $cpus --kingdom Bacteria --locustag P7741 --outdir P7741_annotation --prefix P7741 --addgenes P7741.reordered.fasta

# show some pseudogenes
./get_pseudo.pl P7741_annotation/P7741.faa > P7741_annotation/P7741.pseudo.txt
head -50 P7741_annotation/P7741.pseudo.txt

# get some counts of genome features
# vincentappiah numbers differ for reason speculated over in above sections
python get_annot_stats.py P7741_annotation P7741

conda deactivate

```

## Comparative Analysis

### Average Nucleotide Identity

-   dRep is a python program for rapidly comparing large numbers of genomes

-   Comments in dendrogram.sh says it needs <https://github.com/ParBLiSS/FastANI> and that leads to <https://drep.readthedocs.io/en/latest/installation.html>

-   FastANI is developed for fast alignment-free computation of whole-genome Average Nucleotide Identity (ANI).

-   Script dendrogram.sh calls [dRep](https://github.com/MrOlm/drep): it is installed in conda bacterial-genomics-tutorial-sw7 but not possible to add fastani to this build do to errors (with perl versions if I remember correctly), so build a particular environment for dRep (see Set Up page).

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
# particular environment for dRep
conda activate for_drep

# dRep check_dependencies
# uncomment to re-run
# ./dendogram.sh

conda deactivate

```

-   Some of the outputs from the PDFs generated are given as screen-shot images here.

-   Cluster of P7741/Liflandii/Shinsuense is different between methods ANI methods but agreement with the distinction of SGL03 and Agy99 that are approaching 100% Average Nucleotide Identity.

![fastANI cluster: just the *Mycobacterium ulcerans* genomes](img/cluster1.png){width="500"}

![MASH cluster: H37Rv (green label - hard to read in image) is *Mycobacterium tuberculosis* and is clearly very different, an outlier with respect to ANI, to the *Mycobacterium ulcerans* genomes.](img/cluster2.png){width="700"}

### Generate Genome Feature Files

using <https://github.com/tseemann/prokka> to run 5 reference genomes Agy99 Liflandii SGL03 Shinsuense H37Rv

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
# 
conda activate bacterial-genomics-tutorial-sw7

# takes just over an hour on laptop to 
# generate gffs for 6 bacterial genomes
# ./get_genome_gffs.sh 

ls -lh gffs | awk '{print $5 " " $6 $7 " " $8" " $9}' 

conda deactivate

```

### Genome ring structures using BRIG

<https://github.com/happykhan/BRIG>

BRIG-0.95-distjava -Xmx1500M -jar BRIG.jar

needs Genbank formats as generated by prokka e.g. P7741.gbk

but, these were deleted by the get_genome_gffs.sh script that used prokka

need to re-run with delete turned off... later...

### Generate Pangenome

Roary is a high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.

using

-   roary and roary_plots.py <https://sanger-pathogens.github.io/Roary/>

    -   Roary is a high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.

-   FastTree <https://microbesonline.org/fasttree/>

    -   FastTree infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.

```{zsh}
# conda 
source ~/anaconda3/etc/profile.d/conda.sh
# 
conda activate bacterial-genomics-tutorial-sw7

# uncomment to re-run
# ./get_pangenome.sh 

# Pangenome analysis using roary and fasttree
# i have 4 cores
threads=4

# # Uncomment appropriately to re-run
# roary -f pangenome -p $threads -e -n -v --mafft gffs/*.gff
# # Generate alignment file
# FastTree -nt -gtr pangenome/core_gene_alignment.aln > pangenome/mytree.newick


# # Plot phylogenetic tree and presence/absense in svg format
# python roary_plots.py --labels --format svg pangenome/mytree.newick pangenome/gene_presence_absence.csv
# # same as png
# python roary_plots.py --labels              pangenome/mytree.newick pangenome/gene_presence_absence.csv
# # move all pangenome plots to img folder
# mv pangenome_*.{svg,png} img

# # generates gene_count_summary.png that needs to be renamed and moved 
# # 3 closely related genomes
# python gene_count_summary.py P7741 Agy99 Liflandii pangenome/gene_presence_absence.csv
# mv gene_count_summary.png  img/P7741_Agy99_Liflandii.png
# # 2 closely related genomes and Mtycobacterium tuberculosis
# python gene_count_summary.py P7741 H37Rv Liflandii pangenome/gene_presence_absence.csv
# mv gene_count_summary.png  img/P7741_H37Rv_Liflandii.png

echo "Genomes used with Roary:"
ls -1 gffs/*.gff
echo ""

echo "pangenome/summary_statistics.txt"
cat pangenome/summary_statistics.txt

conda deactivate

```

![Pangenome Tree and Matrix of the Mycobacterium tuberculosis genome versus the Mycobacterium ulcerans genomes. Of the 11935 only 91 are considered core genes across all 6 genomes (a score of between \>= 99% similarity).](img/pangenome_matrix.png){width="5100"}

![Pangenome Frequency.](img/pangenome_frequency.png){width="1050"}

![Genes unique to the set P7741, Agy99 and Liflandii (1395 = 390 + 2 + 120 + 141 + 3 + 6 + 733) Within the set, for example Agy99 has 120 unique genes. Of the 1395 unique genes within the set, Agy99 and P7741 share only 5, whilst P7741 and Liflandii share 144.](img/P7741_Agy99_Liflandii.png)

![Genes unique to the set P7741, H37Rv, Liflandii (5169 = 390 + 0 + 3904 + 141 + 1 + 0 + 733).](img/P7741_H37Rv_Liflandii.png)

## Strange bug

```{r}
# With Quarto, the strange bug means that if an {r} executable block is included
# then the preceding {bash} blocks are executed, otherwise not!
# Simply include this and all is executed as desired.
```
